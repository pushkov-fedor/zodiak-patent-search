# src/interfaces/telegram/handlers/search.py

import logging
from typing import Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.application.services.patent_summarizer import PatentSummarizer
from src.application.use_cases.patent_search import PatentSearchUseCase
from src.domain.entities.search_filter import SearchFilter
from src.infrastructure.cache.patent_cache import PatentCache
from src.infrastructure.utils.text import count_words
from src.interfaces.telegram.keyboards.filters import create_filter_keyboard
from src.interfaces.telegram.keyboards.main import (
    create_exact_search_keyboard,
    create_main_keyboard,
)
from src.interfaces.telegram.states.search import SearchStates
from src.interfaces.telegram.utils.formatters import format_patent_message

logger = logging.getLogger(__name__)

router = Router()


class SearchHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(
        self,
        search_use_case: PatentSearchUseCase,
        patent_summarizer: PatentSummarizer,
        patent_cache: PatentCache
    ):
        self.search_use_case = search_use_case
        self.patent_summarizer = patent_summarizer
        self.patent_cache = patent_cache
        self._register_handlers()

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        router.message.register(self.cmd_start, Command("start"))
        router.message.register(self.cmd_help, Command("help"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        router.message.register(
            self.process_search_similar,
            F.text == "üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"
        )
        router.message.register(
            self.process_search_exact,
            F.text == "üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫"
        )
        router.message.register(
            self.process_filters_button,
            F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        )
        router.message.register(
            self.process_show_filters,
            F.text == "üëÅ –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã"
        )
        router.message.register(
            self.process_return_to_main,
            F.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
        router.message.register(
            self.process_help_button,
            F.text == "‚ùì –ü–æ–º–æ—â—å"
        )
        router.message.register(
            self.handle_search_query,
            SearchStates.waiting_for_query
        )

    async def cmd_start(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_main_keyboard()
        )
        await state.set_state(SearchStates.choosing_method)

    async def cmd_help(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.answer(
            "‚ÑπÔ∏è –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–∞—Ç–µ–Ω—Ç—ã –ø–æ –¥–≤—É–º –º–µ—Ç–æ–¥–∞–º:\n\n"
            "**üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫**: –ü–æ–∏—Å–∫ –ø–∞—Ç–µ–Ω—Ç–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –ø–æ —Å–º—ã—Å–ª—É "
            "–Ω–∞ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
            "**üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫**: –ü–æ–∏—Å–∫ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞.",
            reply_markup=create_main_keyboard(),
            parse_mode="Markdown"
        )

    async def process_search_similar(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        await message.answer(
            "üîç <b>–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫</b> –≤—ã–±—Ä–∞–Ω.\n\n"
            "‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "
            "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤).\n\n"
            "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            parse_mode="HTML",
            reply_markup=create_main_keyboard()
        )
        await state.update_data(search_method="semantic")
        await state.set_state(SearchStates.waiting_for_query)

    async def process_search_exact(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        await state.update_data(search_method="exact")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await message.answer(
            "üéØ *–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫* –≤—ã–±—Ä–∞–Ω.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏:",
            parse_mode="Markdown",
            reply_markup=create_exact_search_keyboard()
        )
        
        await state.set_state(SearchStates.waiting_for_query)

    async def process_filters_button(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        data = await state.get_data()
        if data.get('search_method') != "exact":
            return
            
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_filter_keyboard()
        )
        await state.set_state(SearchStates.confirming_filters)

    async def process_show_filters(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        data = await state.get_data()
        if data.get('search_method') != "exact":
            return
            
        search_filter = self._create_search_filter(data)
        filter_info = self._format_filter_info(search_filter)
        
        await message.answer(
            f"üîç <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:</b>\n\n{filter_info}",
            parse_mode="HTML",
            reply_markup=create_exact_search_keyboard()
        )

    async def process_return_to_main(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_main_keyboard()
        )
        await state.set_state(SearchStates.choosing_method)

    async def process_help_button(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        await self.cmd_help(message)

    async def handle_search_query(
        self,
        message: Message,
        state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if message.text.startswith('/') or message.text in [
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
            "üëÅ –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã",
            "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ]:
            return

        data = await state.get_data()
        method = data.get('search_method')
        query = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if method == "semantic" and count_words(query) < 50:
            await message.answer(
                "‚ö†Ô∏è <b>–î–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ 50 —Å–ª–æ–≤.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                parse_mode="HTML",
                reply_markup=create_main_keyboard()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        await message.answer(
            "üîç <b>–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç–µ–Ω—Ç–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...</b>",
            parse_mode="HTML"
        )

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            search_filter = self._create_search_filter(data)

            if method == "semantic":
                result = await self.search_use_case.search_similar(query)
            else:
                result = await self.search_use_case.search_by_query(
                    query,
                    search_filter=search_filter
                )

            if result.patents:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                filter_info = self._format_filter_info(search_filter)
                await message.answer(
                    f"‚ú® <b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤:</b> {result.total_count}\n\n"
                    f"{filter_info}",
                    parse_mode="HTML"
                )

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ç–µ–Ω—Ç
                for index, patent in enumerate(result.patents, 1):
                    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis = await self.patent_summarizer.analyze_patent(
                        patent.id,
                        patent.get_full_text()
                    )
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
                    messages = format_patent_message(
                        patent=patent,
                        index=index,
                        summary={"status": "success", "summary": analysis} if analysis else None
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                    for msg in messages:
                        await message.answer(msg, parse_mode="HTML")

            else:
                await message.answer(
                    "‚ùå –ü–∞—Ç–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã.",
                    reply_markup=create_main_keyboard()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )

        # –í –∫–æ–Ω—Ü–µ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        data = await state.get_data()
        keyboard = (
            create_exact_search_keyboard()
            if data.get('search_method') == "exact"
            else create_main_keyboard()
        )
        
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await state.set_state(SearchStates.waiting_for_query)

    def _create_search_filter(self, data: dict) -> Optional[SearchFilter]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ SearchFilter –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not any([
            data.get('countries'),
            data.get('ipc_codes'),
            data.get('cpc_codes'),
            data.get('date_from'),
            data.get('date_to')
        ]):
            return None

        return SearchFilter(
            countries=data.get('countries'),
            ipc_codes=data.get('ipc_codes'),
            cpc_codes=data.get('cpc_codes'),
            date_from=data.get('date_from'),
            date_to=data.get('date_to')
        )

    def _format_filter_info(self, search_filter: Optional[SearchFilter]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
        if not search_filter:
            return "<i>–§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã</i>"

        filter_info = "<b>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
        if search_filter.countries:
            filter_info += f"üåç –°—Ç—Ä–∞–Ω—ã: {', '.join(search_filter.countries)}\n"
        if search_filter.ipc_codes:
            filter_info += f"üìë –ú–ü–ö: {', '.join(search_filter.ipc_codes)}\n"
        if search_filter.cpc_codes:
            filter_info += f"üìã –°–ü–ö: {', '.join(search_filter.cpc_codes)}\n"
        if search_filter.date_from:
            filter_info += f"üìÖ –°: {search_filter.date_from.strftime('%d.%m.%Y')}\n"
        if search_filter.date_to:
            filter_info += f"üìÖ –ü–æ: {search_filter.date_to.strftime('%d.%m.%Y')}\n"
        
        return filter_info