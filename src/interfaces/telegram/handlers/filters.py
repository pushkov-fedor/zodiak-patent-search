import logging
from datetime import datetime
from typing import Dict, Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.domain.entities.search_filter import SearchFilter
from src.interfaces.telegram.keyboards.filters import create_filter_keyboard
from src.interfaces.telegram.keyboards.main import create_exact_search_keyboard
from src.interfaces.telegram.states.search import SearchStates

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "filter_countries")
async def process_countries_setting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω –ø–æ–∏—Å–∫–∞"""
    await callback.message.edit_text(
        "üåç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU, US, EP)\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:\n"
        "üá∑üá∫ RU - –†–æ—Å—Å–∏—è\n"
        "üá∫üá∏ US - –°–®–ê\n"
        "üá™üá∫ EP - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ø–∞—Ç–µ–Ω—Ç\n"
        "üá∞üáø KZ - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n"
        "üáßüáæ BY - –ë–µ–ª–∞—Ä—É—Å—å"
    )
    await state.set_state(SearchStates.setting_countries)


@router.callback_query(F.data == "filter_ipc")
async def process_ipc_setting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–¥–æ–≤ –ú–ü–ö"""
    await callback.message.edit_text(
        "üìë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –ú–ü–ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "–ü—Ä–∏–º–µ—Ä: A61K6/00, C07D403/12"
    )
    await state.set_state(SearchStates.setting_ipc_codes)


@router.callback_query(F.data == "filter_cpc")
async def process_cpc_setting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–¥–æ–≤ –°–ü–ö"""
    await callback.message.edit_text(
        "üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –°–ü–ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "–ü—Ä–∏–º–µ—Ä: Y02E10/50, H01L31/00"
    )
    await state.set_state(SearchStates.setting_cpc_codes)


@router.callback_query(F.data == "filter_dates")
async def process_dates_setting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞"""
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ –≤ –≥–æ–¥–∞—Ö (–æ—Ç 1 –¥–æ 30)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 20 (–±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ç–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–µ—Ç)"
    )
    await state.set_state(SearchStates.setting_date_from)


@router.callback_query(F.data == "return_to_search")
async def return_to_search(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–∏—Å–∫—É"""
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    await callback.message.answer(
        "‚úÖ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
        reply_markup=create_exact_search_keyboard()
    )
    await state.set_state(SearchStates.waiting_for_query)


@router.message(F.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É")
async def handle_return_to_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É"""
    await message.answer(
        "‚úÖ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
        reply_markup=create_exact_search_keyboard()
    )
    await state.set_state(SearchStates.waiting_for_query)


@router.message(SearchStates.setting_countries)
async def handle_countries_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω"""
    if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É":
        await handle_return_to_search(message, state)
        return

    countries = [c.strip().upper() for c in message.text.split(",")]
    await state.update_data(countries=countries)
    await show_current_filters(message, state)


@router.message(SearchStates.setting_ipc_codes)
async def handle_ipc_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤ –ú–ü–ö"""
    if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É":
        await handle_return_to_search(message, state)
        return

    ipc_codes = [code.strip().upper() for code in message.text.split(",")]
    await state.update_data(ipc_codes=ipc_codes)
    await show_current_filters(message, state)


@router.message(SearchStates.setting_cpc_codes)
async def handle_cpc_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤ –°–ü–ö"""
    if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É":
        await handle_return_to_search(message, state)
        return

    cpc_codes = [code.strip().upper() for code in message.text.split(",")]
    await state.update_data(cpc_codes=cpc_codes)
    await show_current_filters(message, state)


@router.message(SearchStates.setting_date_from)
async def handle_date_from_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞"""
    if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É":
        await handle_return_to_search(message, state)
        return

    try:
        years = int(message.text)
        if not 1 <= years <= 30:
            raise ValueError("Invalid years range")
            
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
        date_from = datetime.now().date() - timedelta(days=years*365)
        
        await state.update_data(date_from=date_from)
        await show_current_filters(message, state)
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.",
            reply_markup=create_exact_search_keyboard()
        )


async def show_current_filters(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    
    filter_text = "üîç <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n"
    
    if countries := data.get('countries'):
        filter_text += f"üåç <b>–°—Ç—Ä–∞–Ω—ã:</b> {', '.join(countries)}\n"
    else:
        filter_text += "üåç <b>–°—Ç—Ä–∞–Ω—ã:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"
    
    if ipc_codes := data.get('ipc_codes'):
        filter_text += f"üìë <b>–ö–æ–¥—ã –ú–ü–ö:</b> {', '.join(ipc_codes)}\n"
    else:
        filter_text += "üìë <b>–ö–æ–¥—ã –ú–ü–ö:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"
    
    if cpc_codes := data.get('cpc_codes'):
        filter_text += f"üìã <b>–ö–æ–¥—ã –°–ü–ö:</b> {', '.join(cpc_codes)}\n"
    else:
        filter_text += "üìã <b>–ö–æ–¥—ã –°–ü–ö:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"
    
    if date_from := data.get('date_from'):
        years_ago = (datetime.now().date() - date_from).days // 365
        filter_text += f"üìÖ <b>–ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞:</b> {years_ago} –ª–µ—Ç\n"
    else:
        filter_text += "üìÖ <b>–ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞:</b> –Ω–µ –∑–∞–¥–∞–Ω–∞\n"

    await message.answer(
        filter_text,
        parse_mode="HTML",
        reply_markup=create_filter_keyboard()
    )
    await state.set_state(SearchStates.confirming_filters)


@router.callback_query(F.data == "reset_filters")
async def reset_filters(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await state.update_data({
        'countries': None,
        'ipc_codes': None,
        'cpc_codes': None,
        'date_from': None,
        'date_to': None
    })
    await callback.answer("üîÑ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    await show_current_filters(callback.message, state)


@router.callback_query(F.data == "apply_filters")
async def apply_filters(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É"""
    await callback.message.answer(
        "‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=create_exact_search_keyboard()
    )
    await state.set_state(SearchStates.waiting_for_query) 