# src/bot/handlers.py

import logging

from aiogram import Dispatcher, Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from src.services.rospatent import (
    get_patent_details,
    search_patents,
    search_patents_similar,
)

router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SearchStates(StatesGroup):
    ChoosingMethod = State()
    WaitingForQuery = State()

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"),
                KeyboardButton(text="üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫")
            ],
            [
                KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_main_keyboard()
    )
    await state.set_state(SearchStates.ChoosingMethod)
    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "‚ÑπÔ∏è –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–∞—Ç–µ–Ω—Ç—ã –ø–æ –¥–≤—É–º –º–µ—Ç–æ–¥–∞–º:\n\n"
        "**üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫**: –ü–æ–∏—Å–∫ –ø–∞—Ç–µ–Ω—Ç–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –ø–æ —Å–º—ã—Å–ª—É –Ω–∞ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "**üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫**: –ü–æ–∏—Å–∫ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞.",
        reply_markup=create_main_keyboard(),
        parse_mode="Markdown"
    )
    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞.")

@router.message(Text(text="üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"))
async def process_search_similar(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer(
        "üîç *–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫* –≤—ã–±—Ä–∞–Ω.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ –º–µ–Ω–µ–µ 50 —Å–ª–æ–≤).",
        parse_mode="Markdown",
        reply_markup=create_main_keyboard()
    )
    await state.update_data(search_method="semantic")
    await state.set_state(SearchStates.WaitingForQuery)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫.")

@router.message(Text(text="üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫"))
async def process_search_exact(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer(
        "üéØ *–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫* –≤—ã–±—Ä–∞–Ω.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
        parse_mode="Markdown",
        reply_markup=create_main_keyboard()
    )
    await state.update_data(search_method="exact")
    await state.set_state(SearchStates.WaitingForQuery)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫.")

@router.message(Text(text="‚ùì –ü–æ–º–æ—â—å"))
async def process_help_button(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n"
        "**üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫**: –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ –º–µ–Ω–µ–µ 50 —Å–ª–æ–≤), –∏ —è –Ω–∞–π–¥—É –ø–∞—Ç–µ–Ω—Ç—ã, –ø–æ—Ö–æ–∂–∏–µ –ø–æ —Å–º—ã—Å–ª—É.\n\n"
        "**üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫**: –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç–µ–Ω—Ç–æ–≤.",
        parse_mode="Markdown",
        reply_markup=create_main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

@router.message(SearchStates.WaitingForQuery)
async def handle_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    query = message.text
    
    data = await state.get_data()
    method = data.get('search_method')
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query}")
    
    try:
        if method == "semantic":
            patents = search_patents_similar(query)
        else:
            patents = search_patents(query)
            
        if patents and len(patents) > 0:
            await message.answer("üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç–µ–Ω—Ç—ã:*", parse_mode="Markdown")
            
            for i, patent in enumerate(patents[:10], start=1):
                patent_id = patent.get('id')
                if not patent_id:
                    continue
                    
                try:
                    details = get_patent_details(patent_id)
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ç–µ–Ω—Ç–µ
                    main_info = (
                        f"*–ü–∞—Ç–µ–Ω—Ç #{i}*\n\n"
                        f"üìë *–ù–∞–∑–≤–∞–Ω–∏–µ:* {details.title}\n"
                        f"üìÖ *–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {details.publication_date}\n"
                        f"üìÖ *–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:* {details.application_date}\n"
                        f"üë§ *–ê–≤—Ç–æ—Ä—ã:* {', '.join(details.authors)}\n"
                        f"üíº *–ü–∞—Ç–µ–Ω—Ç–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–∏:* {', '.join(details.patent_holders)}\n"
                        f"üî∞ *–ú–ü–ö:* {', '.join(details.ipc_codes)}\n\n"
                        f"üìù *–†–µ—Ñ–µ—Ä–∞—Ç:*\n{details.abstract}\n\n"
                        f"üìã *–§–æ—Ä–º—É–ª–∞ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è:*\n{details.claims}\n\n"
                        f"üìö *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{details.description}"
                    )
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                    max_length = 4096
                    if len(main_info) > max_length:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏
                        for i in range(0, len(main_info), max_length):
                            chunk = main_info[i:i + max_length]
                            await message.answer(chunk, parse_mode="Markdown")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        await message.answer(main_info, parse_mode="Markdown")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ç–µ–Ω—Ç–∞ {patent_id}: {e}")
                    continue
                    
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–º –∂–µ –º–µ—Ç–æ–¥–æ–º –ø–æ–∏—Å–∫–∞
            await state.set_state(SearchStates.WaitingForQuery)
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:",
                reply_markup=create_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü–∞—Ç–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:", 
                reply_markup=create_main_keyboard()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
            await state.set_state(SearchStates.WaitingForQuery)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.set_state(SearchStates.WaitingForQuery)
    
    # –£–±–∏—Ä–∞–µ–º state.clear(), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞

def register_handlers(dispatcher: Dispatcher):
    dispatcher.include_router(router) 