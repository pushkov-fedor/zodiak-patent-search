# tests/unit/test_search_handler.py

from datetime import date
from unittest.mock import AsyncMock, Mock

import pytest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup

from src.application.use_cases.patent_search import PatentSearchResult
from src.domain.entities.patent import Patent


@pytest.mark.asyncio
async def test_cmd_start(handler):
    # Arrange
    message = AsyncMock(spec=Message)
    message.from_user = Mock(id=1)
    message.answer = AsyncMock()
    state = AsyncMock(spec=FSMContext)

    # Act
    await handler.cmd_start(message, state)

    # Assert
    assert message.answer.await_count == 1
    called_kwargs = message.answer.call_args.kwargs
    assert isinstance(called_kwargs.get('reply_markup'), ReplyKeyboardMarkup)
    assert state.set_state.await_count == 1


@pytest.mark.asyncio
async def test_handle_search_query_exact(handler):
    # Arrange
    message = AsyncMock(spec=Message)
    message.text = "Test Query"
    message.answer = AsyncMock()
    message.answer_document = AsyncMock()
    state = AsyncMock(spec=FSMContext)
    state.get_data = AsyncMock(return_value={"search_method": "exact"})

    mock_result = PatentSearchResult(
        query="Test Query",
        total_count=1,
        patents=[
            Patent(
                id="123",
                title="Test Patent",
                publication_date=date(2023, 1, 1),
                application_date=date(2022, 1, 1),
                authors=["Author A"],
                patent_holders=["Holder A"],
                ipc_codes=["IPC1"],
                abstract="Abstract",
                claims="Claims",
                description="Description"
            )
        ]
    )
    handler.search_use_case.search_by_query = AsyncMock(return_value=mock_result)
    handler.patent_summarizer.analyze_patent = AsyncMock(return_value="Test analysis")

    # Act
    await handler.handle_search_query(message, state)

    # Assert
    handler.search_use_case.search_by_query.assert_awaited_once_with("Test Query", search_filter=None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ answer –∏ answer_document
    assert message.answer.await_count == 4  # 1. –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞, 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, 3. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ, 4. –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    assert message.answer_document.await_count == 1  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–æ–≤
    for call_args in message.answer.call_args_list:
        assert 'parse_mode' in call_args.kwargs
        assert call_args.kwargs['parse_mode'] == "HTML"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ answer_document
    assert 'caption' in message.answer_document.call_args.kwargs
    assert message.answer_document.call_args.kwargs['caption'] == "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOC"

    assert state.set_state.await_count == 1